== Introducing Java Reflection ==

Because of the size and nature of this little project, about four utility classes with only `static` methods, I will refer to the JavaDoc for all documentation.

[http://code.google.com/p/java-reflection/source/browse/trunk/javadoc/users/src-html/org/codemonkey/javareflection/JReflect.html JReflect] | 
[http://code.google.com/p/java-reflection/source/browse/trunk/javadoc/users/src-html/org/codemonkey/javareflection/ValueConverter.html ValueConverter] | 
[http://code.google.com/p/java-reflection/source/browse/trunk/javadoc/users/src-html/org/codemonkey/javareflection/FieldUtils.html FieldUtils] | 
[http://code.google.com/p/java-reflection/source/browse/trunk/javadoc/users/src-html/org/codemonkey/javareflection/ExternalClassLoader.html ExternalClassLoader]

_FIXME: for some reason I can't get Google Code to show the JavaDoc as html (the svn:mime-type should be right)._

Here's a summary about what's inside:

Main features:

  * an advanced utility class that finds and invokes methods/constructors based on a given list of values (optionally converting the values to the right type)
  * a conversion class that is able to convert common value type to a different type (`boolean` to `Character` for example)
  * an easy way to find an object's fields, optionally including setters/getters, restricted by a number of criteria (such as: should have a getter method, should be a `public` field etc.)
  * an (experimental, but tested) ClassLoader that is able to resort to manually compile .class files and load them on the fly

Extra features:

  * a method that returns the autoboxed version of a value
  * a convenience method that assign a value to an object's field directly
  * a method that determines what the smallest `Number` type is that can hold a list of given number values of various types without losing precision
  * various utility methods